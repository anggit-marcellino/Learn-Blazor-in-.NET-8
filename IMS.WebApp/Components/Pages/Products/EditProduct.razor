@page "/editproduct/{prodId:int}"

@inject NavigationManager NavigationManager
@inject IViewProductByIdUseCase ViewProductByIdUseCase
@inject IEditProductUseCase EditProductUseCase

<h3>EditProduct</h3>
<br />
@if (this.product is not null)
{
	<EditForm Model="product" FormName="formProduct" OnValidSubmit="Update">

		<InputNumber @bind-Value="product.ProductId" hidden></InputNumber>

		<DataAnnotationsValidator></DataAnnotationsValidator>
		<ValidationSummary></ValidationSummary>
		<div class="form-group">
			<label for="name">Product Name</label>
			<InputText id="name" @bind-Value="product.ProductName" class="form-control"></InputText>
			<ValidationMessage For="()=> product.ProductName"></ValidationMessage>
		</div>

		<div class="form-group">
			<label for="quantity">Quantity</label>
			<InputNumber id="quantity" @bind-Value="product.Quantity" class="form-control"></InputNumber>
			<ValidationMessage For="()=> product.Quantity"></ValidationMessage>
		</div>

		<br />
		<button type="submit" class="btn btn-primary">Update</button>
		&nbsp;
		<a href="/inventories" class="btn btn-primary">Cancel</a>
	</EditForm>
}

@code {
	[Parameter]
	public int prodId { get; set; }

	[SupplyParameterFromForm]
	private Product? product { get; set; }

	protected override async Task OnParametersSetAsync()
	{
		this.product ??= await ViewProductByIdUseCase.ExecuteAsync(this.prodId);
	}

	private async Task Update()
	{
		await EditProductUseCase.ExecuteAsync(product);
		NavigationManager.NavigateTo("/products");
	}
}
