@inject NavigationManager NavigationManager
@inject IDeleteProductUseCase DeleteProductUseCase

@if (this.Product is not null)
{
	<tr>
		<td>@Product.ProductName</td>
		<td>@Product.Quantity</td>
		<td>@Product.Price.ToString("c")</td>
		<td>
			<a class="btn btn-light" href="/editinventory/@Product.ProductId">
				Edit
			</a>
		</td>
		<td>
			<button type="button" class="btn btn-light" @onclick="async () => { await HandleDelete(Product.ProductId); }">Delete</button>
		</td>
	</tr>
}

@code {
	[Parameter]
	public Product? Product { get; set; }

	private async Task HandleDelete(int productId)
	{
		await DeleteProductUseCase.ExecuteAsync(productId);
		this.Product = null;
	}

	// private async Task DeleteInventory(int inventoryId)
	// {
	// 	await DeleteInventoryUseCase.ExecuteAsync(inventoryId);
	// 	NavigationManager.Refresh();
	// }

	// <td>
	// 	<EditForm Enhance="true" Model="Inventory" FormName="@($"form-delete-inventory-{Product.ProductId}")"
	// 			  OnValidSubmit="() => DeleteInventory(Product.ProductId)">
	// 		<button type="submit" class="btn btn-light">Delete</button>
	// 	</EditForm>
	// </td>
}

